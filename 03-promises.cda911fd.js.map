{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAYC,SAASC,cAAc,uBACnCC,EAAaF,SAASC,cAAc,qBACpCE,EAAYH,SAASC,cAAc,oBACnCG,EAAcJ,SAASC,cAAc,sBAG3C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIbR,EAAUe,iBAAiB,SAASC,IAIlC,GAHAA,EAAMC,iBAGFZ,EAAYa,MAAQ,EACtB,OAAOC,EAAArB,GAASsB,OAAOC,KAAK,+CAEzB,GAADlB,EAAWe,MAAQ,EACrB,OAAOC,EAAArB,GAASsB,OAAOC,KAAK,8CAEzB,GAADjB,EAAUc,MAAQ,EACpB,OAAOC,EAAArB,GAASsB,OAAOC,KAAK,6CAG9B,IAAIC,EAAQC,OAAOpB,EAAWe,OAG9B,IAAK,IAAIM,EAAI,EAAGA,GAAKnB,EAAYa,MAAOM,IACtClB,EAAckB,EAAGF,GACdG,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,KACVW,EAAArB,GAASsB,OAAOM,QACrB,wBAAsBnB,UAAmBC,UAG5CmB,OAAM,EAACpB,SAAEA,EAAQC,MAAEA,KACXW,EAAArB,GAASsB,OAAOQ,QACrB,uBAAqBrB,UAAiBC,UAG5Cc,GAAgBC,OAAOnB,EAAUc,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst submitBtn = document.querySelector('button[type=submit]');\nconst inputDelay = document.querySelector('input[name=delay]');\nconst inputStep = document.querySelector('input[name=step]');\nconst inputAmount = document.querySelector('input[name=amount]');\n\n//Creating Promise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nsubmitBtn.addEventListener('click', event => {\n  event.preventDefault();\n\n  // Correct values check\n  if (inputAmount.value < 1) {\n    return Notiflix.Notify.info('Wprowadź liczbę większą niż 0 w pole Amount');\n  }\n  if (inputDelay.value < 1) {\n    return Notiflix.Notify.info('Wprowadź liczbę większą niż 0 w pole Delay');\n  }\n  if (inputStep.value < 1) {\n    return Notiflix.Notify.info('Wprowadź liczbę większą niż 0 w pole Step');\n  }\n  //\n  let delay = Number(inputDelay.value);\n\n  // Working bits and pieces\n  for (let i = 1; i <= inputAmount.value; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        return Notiflix.Notify.success(\n          `✅ Fulfilled promise \"${position}\" in \"${delay}\"ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        return Notiflix.Notify.failure(\n          `❌ Rejected promise \"${position}\" in \"${delay}\"ms`\n        );\n      });\n    delay = delay + Number(inputStep.value);\n  }\n});\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$submitBtn","document","querySelector","$47d4ff9957288465$var$inputDelay","$47d4ff9957288465$var$inputStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","value","$parcel$interopDefault","Notify","info","delay1","Number","i","then","success","catch","failure"],"version":3,"file":"03-promises.cda911fd.js.map"}